(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{1596:function(n,s,a){n.exports={advanced:a(2250),basic:a(2251),"custom-item":a(2252),"large-data":a(2253),search:a(2254),"table-transfer":a(2255),"tree-transfer":a(2260)}},2250:function(n,s,a){n.exports={content:{"zh-CN":[["p","穿梭框高级用法，可配置操作文案，可定制宽高，可对底部进行自定义渲染。"]],"en-US":[["p","Advanced Usage of Transfer."],["p","You can customize the labels of the transfer buttons, the width and height of the columns, and what should be displayed in the footer."]]},meta:{order:2,title:{"zh-CN":"高级用法","en-US":"Advanced"},filename:"components/transfer/demo/advanced.md",id:"components-transfer-demo-advanced"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Transfer<span class="token punctuation">,</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'antd\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    mockData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    targetKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  getMock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> targetKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n        key<span class="token punctuation">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n        description<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`description of content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n        chosen<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>chosen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        targetKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      mockData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mockData<span class="token punctuation">,</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleChange <span class="token operator">=</span> targetKeys <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  renderFooter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> float<span class="token punctuation">:</span> <span class="token string">\'right\'</span><span class="token punctuation">,</span> margin<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getMock<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      reload\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transfer</span>\n        <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mockData<span class="token punctuation">}</span></span>\n        <span class="token attr-name">showSearch</span>\n        <span class="token attr-name">listStyle</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n          width<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span>\n          height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">operations</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'to right\'</span><span class="token punctuation">,</span> <span class="token string">\'to left\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">targetKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>targetKeys<span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>\n        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">footer</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderFooter<span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'}],preview:function(){var n=a(0),s=(a(8),a(10));function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function o(n){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function e(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function c(n,s){return(c=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function u(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}var l=function(a){function l(){var a,p,c,i;!function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,l);for(var k=arguments.length,r=new Array(k),d=0;d<k;d++)r[d]=arguments[d];return c=this,i=(a=o(l)).call.apply(a,[this].concat(r)),p=!i||"object"!==t(i)&&"function"!=typeof i?e(c):i,u(e(p),"state",{mockData:[],targetKeys:[]}),u(e(p),"getMock",function(){for(var n=[],s=[],a=0;a<20;a++){var t={key:a.toString(),title:"content".concat(a+1),description:"description of content".concat(a+1),chosen:2*Math.random()>1};t.chosen&&n.push(t.key),s.push(t)}p.setState({mockData:s,targetKeys:n})}),u(e(p),"handleChange",function(n){p.setState({targetKeys:n})}),u(e(p),"renderFooter",function(){return n.createElement(s.Button,{size:"small",style:{float:"right",margin:5},onClick:p.getMock},"reload")}),p}var i,k,r;return function(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&c(n,s)}(l,n.Component),i=l,(k=[{key:"componentDidMount",value:function(){this.getMock()}},{key:"render",value:function(){return n.createElement(s.Transfer,{dataSource:this.state.mockData,showSearch:!0,listStyle:{width:250,height:300},operations:["to right","to left"],targetKeys:this.state.targetKeys,onChange:this.handleChange,render:function(n){return"".concat(n.title,"-").concat(n.description)},footer:this.renderFooter})}}])&&p(i.prototype,k),r&&p(i,r),l}();return n.createElement(l,null)}}},2251:function(n,s,a){n.exports={content:{"zh-CN":[["p","最基本的用法，展示了 ",["code","dataSource"],"、",["code","targetKeys"],"、每行的渲染函数 ",["code","render"]," 以及回调函数 ",["code","onChange"]," ",["code","onSelectChange"]," ",["code","onScroll"]," 的用法。"]],"en-US":[["p","The most basic usage of ",["code","Transfer"]," involves providing the source data and target keys arrays, plus the rendering and some callback functions."]]},meta:{order:0,title:{"zh-CN":"基本用法","en-US":"Basic"},filename:"components/transfer/demo/basic.md",id:"components-transfer-demo-basic"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Transfer<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'antd\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  mockData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    key<span class="token punctuation">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    description<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`description of content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    disabled<span class="token punctuation">:</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> oriTargetKeys <span class="token operator">=</span> mockData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">+</span>item<span class="token punctuation">.</span>key <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    targetKeys<span class="token punctuation">:</span> oriTargetKeys<span class="token punctuation">,</span>\n    selectedKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    disabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>nextTargetKeys<span class="token punctuation">,</span> direction<span class="token punctuation">,</span> moveKeys<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetKeys<span class="token punctuation">:</span> nextTargetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'targetKeys: \'</span><span class="token punctuation">,</span> nextTargetKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'direction: \'</span><span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'moveKeys: \'</span><span class="token punctuation">,</span> moveKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleSelectChange <span class="token operator">=</span> <span class="token punctuation">(</span>sourceSelectedKeys<span class="token punctuation">,</span> targetSelectedKeys<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> selectedKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>sourceSelectedKeys<span class="token punctuation">,</span> <span class="token operator">...</span>targetSelectedKeys<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'sourceSelectedKeys: \'</span><span class="token punctuation">,</span> sourceSelectedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'targetSelectedKeys: \'</span><span class="token punctuation">,</span> targetSelectedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleScroll <span class="token operator">=</span> <span class="token punctuation">(</span>direction<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'direction:\'</span><span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'target:\'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleDisable <span class="token operator">=</span> disabled <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> disabled <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> targetKeys<span class="token punctuation">,</span> selectedKeys<span class="token punctuation">,</span> disabled <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transfer</span>\n          <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>mockData<span class="token punctuation">}</span></span>\n          <span class="token attr-name">titles</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'Source\'</span><span class="token punctuation">,</span> <span class="token string">\'Target\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">targetKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>targetKeys<span class="token punctuation">}</span></span>\n          <span class="token attr-name">selectedKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>selectedKeys<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onSelectChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSelectChange<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onScroll</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleScroll<span class="token punctuation">}</span></span>\n          <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span>\n          <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>\n          <span class="token attr-name">unCheckedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span>\n          <span class="token attr-name">checkedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span>\n          <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDisable<span class="token punctuation">}</span></span>\n          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'}],preview:function(){var n=a(0),s=(a(8),a(10));function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n){return function(n){if(Array.isArray(n)){for(var s=0,a=new Array(n.length);s<n.length;s++)a[s]=n[s];return a}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function e(n){return(e=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function c(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function u(n,s){return(u=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function l(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}for(var i=[],k=0;k<20;k++)i.push({key:k.toString(),title:"content".concat(k+1),description:"description of content".concat(k+1),disabled:k%3<1});var r=i.filter(function(n){return+n.key%3>1}).map(function(n){return n.key}),d=function(a){function k(){var n,s,a,o;!function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,k);for(var u=arguments.length,i=new Array(u),d=0;d<u;d++)i[d]=arguments[d];return a=this,o=(n=e(k)).call.apply(n,[this].concat(i)),s=!o||"object"!==t(o)&&"function"!=typeof o?c(a):o,l(c(s),"state",{targetKeys:r,selectedKeys:[],disabled:!1}),l(c(s),"handleChange",function(n,a,t){s.setState({targetKeys:n}),console.log("targetKeys: ",n),console.log("direction: ",a),console.log("moveKeys: ",t)}),l(c(s),"handleSelectChange",function(n,a){s.setState({selectedKeys:[].concat(p(n),p(a))}),console.log("sourceSelectedKeys: ",n),console.log("targetSelectedKeys: ",a)}),l(c(s),"handleScroll",function(n,s){console.log("direction:",n),console.log("target:",s.target)}),l(c(s),"handleDisable",function(n){s.setState({disabled:n})}),s}var d,f,g;return function(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&u(n,s)}(k,n.Component),d=k,(f=[{key:"render",value:function(){var a=this.state,t=a.targetKeys,p=a.selectedKeys,o=a.disabled;return n.createElement("div",null,n.createElement(s.Transfer,{dataSource:i,titles:["Source","Target"],targetKeys:t,selectedKeys:p,onChange:this.handleChange,onSelectChange:this.handleSelectChange,onScroll:this.handleScroll,render:function(n){return n.title},disabled:o}),n.createElement(s.Switch,{unCheckedChildren:"disabled",checkedChildren:"disabled",checked:o,onChange:this.handleDisable,style:{marginTop:16}}))}}])&&o(d.prototype,f),g&&o(d,g),k}();return n.createElement(d,null)}}},2252:function(n,s,a){n.exports={content:{"zh-CN":[["p","自定义渲染每一个 Transfer Item，可用于渲染复杂数据。"]],"en-US":[["p","Custom each Transfer Item, and in this way you can render a complex datasource."]]},meta:{order:3,title:{"zh-CN":"自定义渲染行数据","en-US":"Custom datasource"},filename:"components/transfer/demo/custom-item.md",id:"components-transfer-demo-custom-item"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Transfer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'antd\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    mockData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    targetKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  getMock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> targetKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n        key<span class="token punctuation">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n        description<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`description of content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n        chosen<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>chosen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        targetKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      mockData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mockData<span class="token punctuation">,</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>targetKeys<span class="token punctuation">,</span> direction<span class="token punctuation">,</span> moveKeys<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetKeys<span class="token punctuation">,</span> direction<span class="token punctuation">,</span> moveKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  renderItem <span class="token operator">=</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> customLabel <span class="token operator">=</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>item<span class="token punctuation">.</span>title<span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>description<span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      label<span class="token punctuation">:</span> customLabel<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// for displayed item</span>\n      value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// for title and filter matching</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transfer</span>\n        <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mockData<span class="token punctuation">}</span></span>\n        <span class="token attr-name">listStyle</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n          width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n          height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">targetKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>targetKeys<span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>\n        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderItem<span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'}],preview:function(){var n=a(0),s=(a(8),a(10));function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function o(n){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function e(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function c(n,s){return(c=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function u(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}var l=function(a){function l(){var s,a,p,c;!function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,l);for(var i=arguments.length,k=new Array(i),r=0;r<i;r++)k[r]=arguments[r];return p=this,c=(s=o(l)).call.apply(s,[this].concat(k)),a=!c||"object"!==t(c)&&"function"!=typeof c?e(p):c,u(e(a),"state",{mockData:[],targetKeys:[]}),u(e(a),"getMock",function(){for(var n=[],s=[],t=0;t<20;t++){var p={key:t.toString(),title:"content".concat(t+1),description:"description of content".concat(t+1),chosen:2*Math.random()>1};p.chosen&&n.push(p.key),s.push(p)}a.setState({mockData:s,targetKeys:n})}),u(e(a),"handleChange",function(n,s,t){console.log(n,s,t),a.setState({targetKeys:n})}),u(e(a),"renderItem",function(s){return{label:n.createElement("span",{className:"custom-item"},s.title," - ",s.description),value:s.title}}),a}var i,k,r;return function(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&c(n,s)}(l,n.Component),i=l,(k=[{key:"componentDidMount",value:function(){this.getMock()}},{key:"render",value:function(){return n.createElement(s.Transfer,{dataSource:this.state.mockData,listStyle:{width:300,height:300},targetKeys:this.state.targetKeys,onChange:this.handleChange,render:this.renderItem})}}])&&p(i.prototype,k),r&&p(i,r),l}();return n.createElement(l,null)}}},2253:function(n,s){n.exports={meta:{}}},2254:function(n,s,a){n.exports={content:{"zh-CN":[["p","带搜索框的穿梭框，可以自定义搜索函数。"]],"en-US":[["p","Transfer with a search box."]]},meta:{order:1,title:{"zh-CN":"带搜索框","en-US":"Search"},filename:"components/transfer/demo/search.md",id:"components-transfer-demo-search"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Transfer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'antd\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    mockData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    targetKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  getMock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> targetKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n        key<span class="token punctuation">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n        description<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`description of content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n        chosen<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>chosen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        targetKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      mockData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mockData<span class="token punctuation">,</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  filterOption <span class="token operator">=</span> <span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> option<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> option<span class="token punctuation">.</span>description<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n  handleChange <span class="token operator">=</span> targetKeys <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleSearch <span class="token operator">=</span> <span class="token punctuation">(</span>dir<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'search:\'</span><span class="token punctuation">,</span> dir<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transfer</span>\n        <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mockData<span class="token punctuation">}</span></span>\n        <span class="token attr-name">showSearch</span>\n        <span class="token attr-name">filterOption</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterOption<span class="token punctuation">}</span></span>\n        <span class="token attr-name">targetKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>targetKeys<span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>\n        <span class="token attr-name">onSearch</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSearch<span class="token punctuation">}</span></span>\n        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'}],preview:function(){var n=a(0),s=(a(8),a(10));function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function o(n){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function e(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function c(n,s){return(c=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function u(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}var l=function(a){function l(){var n,s,a,p;!function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,l);for(var c=arguments.length,i=new Array(c),k=0;k<c;k++)i[k]=arguments[k];return a=this,p=(n=o(l)).call.apply(n,[this].concat(i)),s=!p||"object"!==t(p)&&"function"!=typeof p?e(a):p,u(e(s),"state",{mockData:[],targetKeys:[]}),u(e(s),"getMock",function(){for(var n=[],a=[],t=0;t<20;t++){var p={key:t.toString(),title:"content".concat(t+1),description:"description of content".concat(t+1),chosen:2*Math.random()>1};p.chosen&&n.push(p.key),a.push(p)}s.setState({mockData:a,targetKeys:n})}),u(e(s),"filterOption",function(n,s){return s.description.indexOf(n)>-1}),u(e(s),"handleChange",function(n){s.setState({targetKeys:n})}),u(e(s),"handleSearch",function(n,s){console.log("search:",n,s)}),s}var i,k,r;return function(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&c(n,s)}(l,n.Component),i=l,(k=[{key:"componentDidMount",value:function(){this.getMock()}},{key:"render",value:function(){return n.createElement(s.Transfer,{dataSource:this.state.mockData,showSearch:!0,filterOption:this.filterOption,targetKeys:this.state.targetKeys,onChange:this.handleChange,onSearch:this.handleSearch,render:function(n){return n.title}})}}])&&p(i.prototype,k),r&&p(i,r),l}();return n.createElement(l,null)}}},2255:function(n,s,a){n.exports={content:{"zh-CN":[["p","使用 Table 组件作为自定义渲染列表。"]],"en-US":[["p","Customize render list with Table component."]]},meta:{order:5,title:{"zh-CN":"表格穿梭框","en-US":"Table Transfer"},filename:"components/transfer/demo/table-transfer.md",id:"components-transfer-demo-table-transfer"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Transfer<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Table<span class="token punctuation">,</span> Tag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'antd\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> difference <span class="token keyword">from</span> <span class="token string">\'lodash/difference\'</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// Customize Table Transfer</span>\n<span class="token keyword">const</span> TableTransfer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> leftColumns<span class="token punctuation">,</span> rightColumns<span class="token punctuation">,</span> <span class="token operator">...</span>restProps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Transfer <span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span> showSelectAll<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      direction<span class="token punctuation">,</span>\n      filteredItems<span class="token punctuation">,</span>\n      onItemSelectAll<span class="token punctuation">,</span>\n      onItemSelect<span class="token punctuation">,</span>\n      selectedKeys<span class="token punctuation">:</span> listSelectedKeys<span class="token punctuation">,</span>\n      disabled<span class="token punctuation">:</span> listDisabled<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> columns <span class="token operator">=</span> direction <span class="token operator">===</span> <span class="token string">\'left\'</span> <span class="token operator">?</span> leftColumns <span class="token punctuation">:</span> rightColumns<span class="token punctuation">;</span>\n\n      <span class="token keyword">const</span> rowSelection <span class="token operator">=</span> <span class="token punctuation">{</span>\n        getCheckboxProps<span class="token punctuation">:</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> disabled<span class="token punctuation">:</span> listDisabled <span class="token operator">||</span> item<span class="token punctuation">.</span>disabled <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">onSelectAll</span><span class="token punctuation">(</span>selected<span class="token punctuation">,</span> selectedRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> treeSelectedKeys <span class="token operator">=</span> selectedRows\n            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>item<span class="token punctuation">.</span>disabled<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> diffKeys <span class="token operator">=</span> selected\n            <span class="token operator">?</span> <span class="token function">difference</span><span class="token punctuation">(</span>treeSelectedKeys<span class="token punctuation">,</span> listSelectedKeys<span class="token punctuation">)</span>\n            <span class="token punctuation">:</span> <span class="token function">difference</span><span class="token punctuation">(</span>listSelectedKeys<span class="token punctuation">,</span> treeSelectedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token function">onItemSelectAll</span><span class="token punctuation">(</span>diffKeys<span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">onSelect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">,</span> selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">onItemSelect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        selectedRowKeys<span class="token punctuation">:</span> listSelectedKeys<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Table</span>\n          <span class="token attr-name">rowSelection</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>rowSelection<span class="token punctuation">}</span></span>\n          <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span></span>\n          <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>filteredItems<span class="token punctuation">}</span></span>\n          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>\n          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pointerEvents<span class="token punctuation">:</span> listDisabled <span class="token operator">?</span> <span class="token string">\'none\'</span> <span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">onRow</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> disabled<span class="token punctuation">:</span> itemDisabled <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n            onClick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>itemDisabled <span class="token operator">||</span> listDisabled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n              <span class="token function">onItemSelect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">!</span>listSelectedKeys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span></span><span class="token attr-name">)}</span>\n        <span class="token punctuation">/></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transfer</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mockTags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'cat\'</span><span class="token punctuation">,</span> <span class="token string">\'dog\'</span><span class="token punctuation">,</span> <span class="token string">\'bird\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mockData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  mockData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    key<span class="token punctuation">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    description<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`description of content</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    disabled<span class="token punctuation">:</span> i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    tag<span class="token punctuation">:</span> mockTags<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> originTargetKeys <span class="token operator">=</span> mockData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">+</span>item<span class="token punctuation">.</span>key <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> leftTableColumns <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    dataIndex<span class="token punctuation">:</span> <span class="token string">\'title\'</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Name\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    dataIndex<span class="token punctuation">:</span> <span class="token string">\'tag\'</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Tag\'</span><span class="token punctuation">,</span>\n    render<span class="token punctuation">:</span> tag <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tag</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>tag<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tag</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    dataIndex<span class="token punctuation">:</span> <span class="token string">\'description\'</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Description\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> rightTableColumns <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    dataIndex<span class="token punctuation">:</span> <span class="token string">\'title\'</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Name\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    targetKeys<span class="token punctuation">:</span> originTargetKeys<span class="token punctuation">,</span>\n    disabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    showSearch<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  onChange <span class="token operator">=</span> nextTargetKeys <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetKeys<span class="token punctuation">:</span> nextTargetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  triggerDisable <span class="token operator">=</span> disabled <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> disabled <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  triggerShowSearch <span class="token operator">=</span> showSearch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showSearch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> targetKeys<span class="token punctuation">,</span> disabled<span class="token punctuation">,</span> showSearch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableTransfer</span>\n          <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>mockData<span class="token punctuation">}</span></span>\n          <span class="token attr-name">targetKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>targetKeys<span class="token punctuation">}</span></span>\n          <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span>\n          <span class="token attr-name">showSearch</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>showSearch<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span>\n          <span class="token attr-name">filterOption</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n            item<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>\n          <span class="token punctuation">}</span></span>\n          <span class="token attr-name">leftColumns</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>leftTableColumns<span class="token punctuation">}</span></span>\n          <span class="token attr-name">rightColumns</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>rightTableColumns<span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>\n          <span class="token attr-name">unCheckedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span>\n          <span class="token attr-name">checkedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span>\n          <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerDisable<span class="token punctuation">}</span></span>\n          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span>\n          <span class="token attr-name">unCheckedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showSearch<span class="token punctuation">"</span></span>\n          <span class="token attr-name">checkedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showSearch<span class="token punctuation">"</span></span>\n          <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>showSearch<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerShowSearch<span class="token punctuation">}</span></span>\n          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'}],preview:function(){var n,s=a(0),t=(a(8),a(10)),p=(n=a(2256))&&n.__esModule?n:{default:n};function o(n){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function e(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function c(n){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function u(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function l(n,s){return(l=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function i(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}function k(){return(k=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n}).apply(this,arguments)}function r(n,s){if(null==n)return{};var a,t,p=function(n,s){if(null==n)return{};var a,t,p={},o=Object.keys(n);for(t=0;t<o.length;t++)a=o[t],s.indexOf(a)>=0||(p[a]=n[a]);return p}(n,s);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)a=o[t],s.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(p[a]=n[a])}return p}for(var d=function(n){var a=n.leftColumns,o=n.rightColumns,e=r(n,["leftColumns","rightColumns"]);return s.createElement(t.Transfer,k({},e,{showSelectAll:!1}),function(n){var e=n.direction,c=n.filteredItems,u=n.onItemSelectAll,l=n.onItemSelect,i=n.selectedKeys,k=n.disabled,r="left"===e?a:o,d={getCheckboxProps:function(n){return{disabled:k||n.disabled}},onSelectAll:function(n,s){var a=s.filter(function(n){return!n.disabled}).map(function(n){return n.key}),t=n?(0,p.default)(a,i):(0,p.default)(i,a);u(t,n)},onSelect:function(n,s){var a=n.key;l(a,s)},selectedRowKeys:i};return s.createElement(t.Table,{rowSelection:d,columns:r,dataSource:c,size:"small",style:{pointerEvents:k?"none":null},onRow:function(n){var s=n.key,a=n.disabled;return{onClick:function(){a||k||l(s,!i.includes(s))}}}})})},f=["cat","dog","bird"],g=[],y=0;y<20;y++)g.push({key:y.toString(),title:"content".concat(y+1),description:"description of content".concat(y+1),disabled:y%4==0,tag:f[y%3]});var h=g.filter(function(n){return+n.key%3>1}).map(function(n){return n.key}),m=[{dataIndex:"title",title:"Name"},{dataIndex:"tag",title:"Tag",render:function(n){return s.createElement(t.Tag,null,n)}},{dataIndex:"description",title:"Description"}],b=[{dataIndex:"title",title:"Name"}],w=function(n){function a(){var n,s,t,p;!function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,a);for(var e=arguments.length,l=new Array(e),k=0;k<e;k++)l[k]=arguments[k];return t=this,p=(n=c(a)).call.apply(n,[this].concat(l)),s=!p||"object"!==o(p)&&"function"!=typeof p?u(t):p,i(u(s),"state",{targetKeys:h,disabled:!1,showSearch:!1}),i(u(s),"onChange",function(n){s.setState({targetKeys:n})}),i(u(s),"triggerDisable",function(n){s.setState({disabled:n})}),i(u(s),"triggerShowSearch",function(n){s.setState({showSearch:n})}),s}var p,k,r;return function(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&l(n,s)}(a,s.Component),p=a,(k=[{key:"render",value:function(){var n=this.state,a=n.targetKeys,p=n.disabled,o=n.showSearch;return s.createElement("div",null,s.createElement(d,{dataSource:g,targetKeys:a,disabled:p,showSearch:o,onChange:this.onChange,filterOption:function(n,s){return-1!==s.title.indexOf(n)||-1!==s.tag.indexOf(n)},leftColumns:m,rightColumns:b}),s.createElement(t.Switch,{unCheckedChildren:"disabled",checkedChildren:"disabled",checked:p,onChange:this.triggerDisable,style:{marginTop:16}}),s.createElement(t.Switch,{unCheckedChildren:"showSearch",checkedChildren:"showSearch",checked:o,onChange:this.triggerShowSearch,style:{marginTop:16}}))}}])&&e(p.prototype,k),r&&e(p,r),a}();return s.createElement(w,null)}}},2256:function(n,s,a){var t=a(2257),p=a(2258),o=a(635),e=a(634),c=o(function(n,s){return e(n)?t(n,p(s,1,e,!0)):[]});n.exports=c},2257:function(n,s,a){var t=a(414),p=a(636),o=a(637),e=a(293),c=a(295),u=a(415),l=200;n.exports=function(n,s,a,i){var k=-1,r=p,d=!0,f=n.length,g=[],y=s.length;if(!f)return g;a&&(s=e(s,c(a))),i?(r=o,d=!1):s.length>=l&&(r=u,d=!1,s=new t(s));n:for(;++k<f;){var h=n[k],m=null==a?h:a(h);if(h=i||0!==h?h:0,d&&m==m){for(var b=y;b--;)if(s[b]===m)continue n;g.push(h)}else r(s,m,i)||g.push(h)}return g}},2258:function(n,s,a){var t=a(416),p=a(2259);n.exports=function n(s,a,o,e,c){var u=-1,l=s.length;for(o||(o=p),c||(c=[]);++u<l;){var i=s[u];a>0&&o(i)?a>1?n(i,a-1,o,e,c):t(c,i):e||(c[c.length]=i)}return c}},2259:function(n,s,a){var t=a(156),p=a(294),o=a(65),e=t?t.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||p(n)||!!(e&&n&&n[e])}},2260:function(n,s,a){n.exports={content:{"zh-CN":[["p","使用 Tree 组件作为自定义渲染列表。"]],"en-US":[["p","Customize render list with Tree component."]]},meta:{order:6,title:{"zh-CN":"树穿梭框","en-US":"Tree Transfer"},filename:"components/transfer/demo/tree-transfer.md",id:"components-transfer-demo-tree-transfer"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Transfer<span class="token punctuation">,</span> Tree <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'antd\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> TreeNode <span class="token punctuation">}</span> <span class="token operator">=</span> Tree<span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// Customize Table Transfer</span>\n<span class="token keyword">const</span> isChecked <span class="token operator">=</span> <span class="token punctuation">(</span>selectedKeys<span class="token punctuation">,</span> eventKey<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> selectedKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>eventKey<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> generateTree <span class="token operator">=</span> <span class="token punctuation">(</span>treeNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> checkedKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> treeNodes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>TreeNode <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> disabled<span class="token operator">=</span><span class="token punctuation">{</span>checkedKeys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token function">generateTree</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> checkedKeys<span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreeNode</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> TreeTransfer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> dataSource<span class="token punctuation">,</span> targetKeys<span class="token punctuation">,</span> <span class="token operator">...</span>restProps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> transferDataSource <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      transferDataSource<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">flatten</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">flatten</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Transfer\n      <span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span>\n      targetKeys<span class="token operator">=</span><span class="token punctuation">{</span>targetKeys<span class="token punctuation">}</span>\n      dataSource<span class="token operator">=</span><span class="token punctuation">{</span>transferDataSource<span class="token punctuation">}</span>\n      className<span class="token operator">=</span><span class="token string">"tree-transfer"</span>\n      render<span class="token operator">=</span><span class="token punctuation">{</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>title<span class="token punctuation">}</span>\n      showSelectAll<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>\n    <span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> direction<span class="token punctuation">,</span> onItemSelect<span class="token punctuation">,</span> selectedKeys <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> <span class="token string">\'left\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> checkedKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>selectedKeys<span class="token punctuation">,</span> <span class="token operator">...</span>targetKeys<span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tree</span>\n              <span class="token attr-name">blockNode</span>\n              <span class="token attr-name">checkable</span>\n              <span class="token attr-name">checkStrictly</span>\n              <span class="token attr-name">defaultExpandAll</span>\n              <span class="token attr-name">checkedKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>checkedKeys<span class="token punctuation">}</span></span>\n              <span class="token attr-name">onCheck</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>\n                _<span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                  node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    props<span class="token punctuation">:</span> <span class="token punctuation">{</span> eventKey <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                  <span class="token punctuation">}</span></span><span class="token attr-name">,</span>\n                <span class="token attr-name">},</span>\n              <span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">{</span>\n                <span class="token attr-name">onItemSelect(eventKey,</span> <span class="token attr-name">!isChecked(checkedKeys,</span> <span class="token attr-name">eventKey));</span>\n              <span class="token attr-name">}}</span>\n              <span class="token attr-name">onSelect</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>\n                _<span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                  node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    props<span class="token punctuation">:</span> <span class="token punctuation">{</span> eventKey <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                  <span class="token punctuation">}</span></span><span class="token attr-name">,</span>\n                <span class="token attr-name">},</span>\n              <span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">{</span>\n                <span class="token attr-name">onItemSelect(eventKey,</span> <span class="token attr-name">!isChecked(checkedKeys,</span> <span class="token attr-name">eventKey));</span>\n              <span class="token attr-name">}}</span>\n            <span class="token punctuation">></span></span>\n              <span class="token punctuation">{</span><span class="token function">generateTree</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> targetKeys<span class="token punctuation">)</span><span class="token punctuation">}</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tree</span><span class="token punctuation">></span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transfer</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> treeData <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">\'0-0\'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">\'0-0\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    key<span class="token punctuation">:</span> <span class="token string">\'0-1\'</span><span class="token punctuation">,</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'0-1\'</span><span class="token punctuation">,</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">\'0-1-0\'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">\'0-1-0\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">\'0-1-1\'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">\'0-1-1\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">\'0-2\'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">\'0-3\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    targetKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  onChange <span class="token operator">=</span> targetKeys <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Target Keys:\'</span><span class="token punctuation">,</span> targetKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetKeys <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> targetKeys <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreeTransfer</span> <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>treeData<span class="token punctuation">}</span></span> <span class="token attr-name">targetKeys</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>targetKeys<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'}],preview:function(){var n=a(0),s=(a(8),a(10));function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function p(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function o(n){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function e(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function c(n,s){return(c=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function u(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}function l(n){return function(n){if(Array.isArray(n)){for(var s=0,a=new Array(n.length);s<n.length;s++)a[s]=n[s];return a}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(){return(i=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n}).apply(this,arguments)}function k(n,s){if(null==n)return{};var a,t,p=function(n,s){if(null==n)return{};var a,t,p={},o=Object.keys(n);for(t=0;t<o.length;t++)a=o[t],s.indexOf(a)>=0||(p[a]=n[a]);return p}(n,s);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)a=o[t],s.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(p[a]=n[a])}return p}var r=s.Tree.TreeNode,d=function(n,s){return-1!==n.indexOf(s)},f=function(a){var t=a.dataSource,p=a.targetKeys,o=k(a,["dataSource","targetKeys"]),e=[];return function n(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).forEach(function(s){e.push(s),n(s.children)})}(t),n.createElement(s.Transfer,i({},o,{targetKeys:p,dataSource:e,className:"tree-transfer",render:function(n){return n.title},showSelectAll:!1}),function(a){var o=a.direction,e=a.onItemSelect,c=a.selectedKeys;if("left"===o){var u=[].concat(l(c),l(p));return n.createElement(s.Tree,{blockNode:!0,checkable:!0,checkStrictly:!0,defaultExpandAll:!0,checkedKeys:u,onCheck:function(n,s){var a=s.node.props.eventKey;e(a,!d(u,a))},onSelect:function(n,s){var a=s.node.props.eventKey;e(a,!d(u,a))}},function s(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return a.map(function(a){var p=a.children,o=k(a,["children"]);return n.createElement(r,i({},o,{disabled:t.includes(o.key)}),s(p,t))})}(t,p))}})},g=[{key:"0-0",title:"0-0"},{key:"0-1",title:"0-1",children:[{key:"0-1-0",title:"0-1-0"},{key:"0-1-1",title:"0-1-1"}]},{key:"0-2",title:"0-3"}],y=function(s){function a(){var n,s,p,c;!function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,a);for(var l=arguments.length,i=new Array(l),k=0;k<l;k++)i[k]=arguments[k];return p=this,c=(n=o(a)).call.apply(n,[this].concat(i)),s=!c||"object"!==t(c)&&"function"!=typeof c?e(p):c,u(e(s),"state",{targetKeys:[]}),u(e(s),"onChange",function(n){console.log("Target Keys:",n),s.setState({targetKeys:n})}),s}var l,i,k;return function(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&c(n,s)}(a,n.Component),l=a,(i=[{key:"render",value:function(){var s=this.state.targetKeys;return n.createElement("div",null,n.createElement(f,{dataSource:g,targetKeys:s,onChange:this.onChange}))}}])&&p(l.prototype,i),k&&p(l,k),a}();return n.createElement(y,null)},style:"\n.tree-transfer .ant-transfer-list:first-child {\n  width: 50%;\n  flex: none;\n}\n"}}}]);